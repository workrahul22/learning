Storage Engine Prerequisites:
    It must be compiled into the server and enabled. Each storage engine is a software module that is compiled
    into the server.
    The use of this modular approach allows storage engines to be easily selected for inclusion in the server at 
    configuration time.
    Some storage engines are always available, such ad InnoDB, MyISAM, MERGE and MEMORY.
    Support for optional engines typically can be selected when MySQL is configured and built.
    To reduce memory use, don't configure unneeded storage engines into the server. To see what storage engines:
        mysql > show engines\G


Different Storage Engine

    MyISAM staorage engine
        MyISAM is the improved version of the original storage engine of MySQL, ISAM
            It is also used for data warehousing
            MyISAM is not transaction-safe and supports 64 keys per table with maximum key lenght of 1024 bytes
            The size of MyISAM table dependents on the host operating system
            MyISAM table allows table level locking only
        The foreign key constraint cannnot be defined
            on disk, MySQL represents each MyISAM table using three files:
                a format file that stores the definition of the table structure
                a data file that stores the contents of table rows and
                and index file that stores any indexes on the table.
            Files for a table named mytable are called mytable.frm, mytable.MYD, and mytable.MYI
        
        MyISAM Row Storage Format
            Three storage format: fixed-row, dynamic-row, and compressed.
                Fixed Row Format:
                    All rows have the same size.
                    Rows are stored within the table at positions that are multiples of the row size.
                    Fixed-size rows take more space.
                Dynamic-row forma:
                    Rows take varying amount of space
                    Rows cannot be looked up as efficiently
                    Dynamic-rows tabled usually take less space because rows are not padded to a fixed size
                    Fragmentation can occur more easily than for fixed-row tables.
                Compressed format:
                    Tables are packed to save space.
                    Storage is optimized for quick retrieval.
                    Tables are read-only.

> describe information_schema.tables;
> select * from information_schema.tables;
> select TABLE_NAME, ENGINE_FORMAT from information_schema.tables where ENGINE='MYISAM';

        NDB (For MySQL Cluster):
            Fully Transactional and ACID storage engine
            Distribution execution of data and using multiple mysqld.
            NDB use logical data with own buffer for each NDB engine.
            Offers REDO and UNDO for transactions.
            Row-level locking.
            Horizontal scaling of data.

        Merge Storage Engine:
            The merge storage engine manages tables that have the following characteristics:
                A merge table is a collection of identical structured MyISAM tables. Each MERGE table is represented on dick by an .frm format file and an .MRG file that lists the name of the constituent MyISAM files.
                Logically, query on a MERGE table acts as a query on all the MyISAM tables of which it consists.
                A MERGE table creates a logical entity that can exceed the maximum MyISAM table size.
                MyISAM manages contention between queries for MERGE table access using table-level locking.
                A MERGE table is portable because the .MRG file is a text file and the MyISAM tables that it names are 
                portable.
                The MERGE engine supports SELECT, DELETE, UPDATE, and INSERT statements. For INSERT, the CREATE TABLE statement can specify whether records should be inserted into the first or last table or disallowed.
                
                Disadvantage:
                    They increase the number of file descriptors required because each of the underlying tables must be opened along with the MERGE tables.
        
            Example:
            > create table t1 (1 int not null auto_increment primary key, message char(20)) engine=MyISAM;
            > create table t2 (1 int not null auto_increment primary key, message char(20)) engine=MyISAM;
            > insert into t1 (message) values ('Testing'),('table'),('t1');
            > insert into t2 (message) values ('Testing'),('table'),('t1');
            > create table total (a int not null auto_increment, message char(20), INDEX(a)) ENGINE=MERGE UNION=(t1,t2) INSERT_METHOD=LAST;
            > select * from total;

        Memory Engine:
            Non transactional storage engine
            All data stored in memory other than table metadata and structure.
            Table-level locking
            Cannot contain TEXT or BLOB columns
            can use different character sets for different columns.

        Archive Engine:
            Non transactional storage engine
            The data file has an extension of .ARZ, .An, .ARN file.
            Added in MySQL 4.1.3
            Storage large amounts of compressed and unindexed data.
            Allos INSERT and SELECT sql operations.
            DELETE or UPDATE sql operations not permitted.
            Table-level locking

Concurrency Control in DBMS, ACID Properties in DBMS
    Dirty Read : A dirty read is a situation whena transaction reads data that has not yet been committed. For example
    Let's say transaction 1 updates a row and leaves it uncommitted, meanwhile Transaction 2 reads the updated row. If 
    transaction 1 rolls back the change, transaction 2 will have read data that is considered never to have existed.

    Non Repeatable Read : Non Repeatable read occurs whena transaction reads the same row twice and gets a different value
    each time. For example, suppose transaction T1 reads data. Due to concurrency, another transaction T2 updated the same data and commit. Now if transaction T1 rereads the same data, it will retrieve a different value.

    Phantom Read : Phantom Read occurs when two same quereies are executed, but the rows retrieved by the two, are different. For example, suppose transaction T1 retrieves a set of rows that satisfy some search criteria. Now, 
    Transaction T2 generates some new rows that match the search criteria for transaction T1. If transaction T1 re-executes the statement that reads the rows, it gets a different set of rows this time.

    Based on these phenomena, The SQL standard defines four isolation levels:
        Read UnCommitted: This is the lowest isolation level, in this level, one transaction may read not yet committed changes made by other transactions, thereby allowing direty reads. At this level, transaction are not isolated
        from each other.

        Read committed : This isolation level gurantees that any data read is committed at the moment it is read. Thus it 
        does not allow diert read. This transaction holds a read or write lock on the current row, and thus prevents other transactions from reading, updating or deleting it.

        Repeatable Read : This is the most restrictive isolation level. The transaction holds read locks on all rows it references and writes locks on referenced rows for update and delete actions. Since other transactions cannot read
        update or delete these rows, consequently it avoids non-repeatable read.

        Serializable: This is the highest isolation level. A serializable execution is guranteed to be serializable. 
        Serializable execution is defined to be an execution of operations in which concurrently executing transactions
        appears to be serially executing.


        Isolation Level         Dirty Read          Non Repeatable reads            Phantoms
        Read Uncommitted        May occur           May occur                       May occur
        Read Committed          Don't occur         May occur                       May occur
        Repeatable Read         Don't occur         Don't occur                     May occur
        Serializable            Don;t occur         Dont't occur                    Don;t occur

        > select @@transaction_isolation
        > select @@global.transaction_isolation
        > set session transaction isolation level read uncommitted;
        > show engine innodb status : show latest detected deadlock
        > set global innodb_print_all_deadlocks = 1;  To show all the deadlocks
        